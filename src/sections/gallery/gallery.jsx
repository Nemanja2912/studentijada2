"use client";
import { useEffect, useRef, useState } from "react";
import styles from "./gallery.module.css";

let counterTimeout;

const imagesByRow = {
  firstRow: [
    "/assets/images/section2_1.jpg",
    "/assets/images/section2_2.jpg",
    "/assets/images/section2_3.jpg",
    "/assets/images/section2_4.jpg",
    "/assets/images/section2_5.jpg",
  ],
  middleRow: [
    "/assets/images/section2_6.jpg",
    "/assets/images/section2_7.jpg",
    "/assets/images/section2_8.jpg",
    "/assets/images/section2_9.jpg",
    "/assets/images/section2_10.jpg",
    "/assets/images/section2_11.jpg",
  ],
  lastRow: [
    "/assets/images/section2_12.jpg",
    "/assets/images/section2_13.jpg",
    "/assets/images/section2_14.jpg",
    "/assets/images/section2_15.jpg",
    "/assets/images/section2_16.jpg",
  ],
};

const Gallery = () => {
  const sectionRef = useRef(null);

  const firstRow = useRef(null);
  const middleRow = useRef(null);
  const lastRow = useRef(null);

  const gridRef = useRef(null);

  const contentRef = useRef(null);

  const [boxSwitch, setBoxSwitch] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      const { top, bottom, height } = sectionRef.current.getBoundingClientRect();

      const percentage = ((window.innerHeight - top) / height) * 100;

      let calculatedScale = 1.4 - (percentage / 100) * 0.4;

      if (calculatedScale < 1) calculatedScale = 1;

      let calculatedMove = 10 - (percentage / 100) * 10;

      // if (calculatedMove > 10) calculatedMove = 10;

      let contentTranslate = 80 - (percentage / 100) * 80;
      let contentRotate = 70 - (percentage / 100) * 70;
      let contentScale = 0.8 + (percentage / 100) * 0.2;

      if (contentRotate < 0) contentRotate = 0;
      if (contentScale > 1) contentScale = 1;

      gridRef.current.style.transform = `scale(${calculatedScale},${calculatedScale})`;

      firstRow.current.style.transform = `translateY(${calculatedMove * -1}%)`;
      lastRow.current.style.transform = `translateY(${calculatedMove * -1}%)`;

      middleRow.current.style.transform = `translateY(${calculatedMove}%)`;

      contentRef.current.style.transform = `translate3d(0px, ${contentTranslate}%, 0px) rotateX(-${contentRotate}deg) scale(${contentScale}, ${contentScale})`;
    };

    window.addEventListener("scroll", handleScroll);

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [sectionRef]);

  return (
    <div className={`${styles.section} gallery`} ref={sectionRef}>
      <div className={`${styles.wrapper} `} ref={gridRef}>
        <div className={styles.background}>
          <div className={styles.counterBoxWrapper} ref={contentRef}>
            <div
              style={{
                transform: boxSwitch === 0 ? "rotateY(0deg)" : "rotateY(90deg)",
                transition: "0.25s ease-in-out",
                transitionDelay: boxSwitch === 0 ? "0.25s" : "0s",
              }}
            >
              <CounterBox
                eventTime="2024-11-16T21:00:00"
                handleChange={setBoxSwitch}
                label="Novom Sadu"
              />
            </div>

            <div
              className={styles.otherSide}
              style={{
                transform: boxSwitch === 1 ? "rotateY(0deg)" : "rotateY(90deg)",
                transition: "0.25s ease-in-out",
                transitionDelay: boxSwitch === 1 ? "0.25s" : "0s",
              }}
            >
              <CounterBox
                eventTime="2024-12-21T21:00:00"
                handleChange={setBoxSwitch}
                label="Beogradu"
              />
            </div>
          </div>
        </div>

        {/* First row */}
        <div className={styles.row} ref={firstRow}>
          {imagesByRow.firstRow.map((src, index) => (
            <div key={index} className={`${styles.imageWrapper} firstRow`}>
              <img src={src} />
            </div>
          ))}
        </div>

        {/* Middle row */}
        <div className={styles.row} ref={middleRow}>
          {imagesByRow.middleRow.map((src, index) => (
            <div key={index + 5} className={`${styles.imageWrapper} middleRow`}>
              <img src={src} />
            </div>
          ))}
        </div>

        {/* Last row */}
        <div className={styles.row} ref={lastRow}>
          {imagesByRow.lastRow.map((src, index) => (
            <div key={index + 10} className={`${styles.imageWrapper} lastRow`}>
              <img src={src} />
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Gallery;

const CounterBox = ({ eventTime, handleChange, label }) => {
  const [time, setTime] = useState({});

  useEffect(() => {
    const getTime = () => {
      const date_future = new Date(eventTime);
      const date_now = new Date();

      // get total seconds between the times
      let delta = Math.abs(date_future - date_now) / 1000;

      if (date_future < date_now) {
        // If the event date has passed, set all values to 0
        setTime({
          days: 0,
          hours: 0,
          minutes: 0,
          seconds: 0,
        });
        return; // Stop further updates
      }

      // calculate (and subtract) whole days
      let days = Math.floor(delta / 86400);
      delta -= days * 86400;

      // calculate (and subtract) whole hours
      let hours = Math.floor(delta / 3600) % 24;
      delta -= hours * 3600;

      // calculate (and subtract) whole minutes
      let minutes = Math.floor(delta / 60) % 60;
      delta -= minutes * 60;

      // calculate whole seconds
      let seconds = Math.floor(delta % 60);

      setTime({
        days,
        hours,
        minutes,
        seconds,
      });

      // Continue updating every second
      counterTimeout = setTimeout(getTime, 1000);
    };

    getTime();

    return () => clearTimeout(counterTimeout);
  }, []);

  const getLabel = (value, type) => {
    if (type === "days") {
      if (value % 10 === 1 && value !== 11) {
        return "dan";
      } else {
        return "dana";
      }
    } else if (type === "hours") {
      if (value === 1 || value === 21) {
        return "sat";
      } else if ((value > 1 && value < 5) || (value > 21 && value < 25)) {
        return "sata";
      } else {
        return "sati";
      }
    } else if (type === "minutes") {
      if (value === 1 || value === 21 || value === 31 || value === 41 || value === 51) {
        return "minut";
      } else if (
        (value > 1 && value < 5) ||
        (value > 21 && value < 25) ||
        (value > 31 && value < 35) ||
        (value > 41 && value < 45) ||
        (value > 51 && value < 55)
      ) {
        return "minute";
      } else {
        return "minuta";
      }
    } else if (type === "seconds") {
      if (value === 1 || value === 21 || value === 31 || value === 41 || value === 51) {
        return "sekund";
      } else if (
        (value > 1 && value < 5) ||
        (value > 21 && value < 25) ||
        (value > 31 && value < 35) ||
        (value > 41 && value < 45) ||
        (value > 51 && value < 55)
      ) {
        return "sekunde";
      } else {
        return "sekundi";
      }
    }
  };

  return (
    <>
      <div
        className={styles.counterBox}
        style={{ transform: "rotateY(0deg)", transition: "3.25s ease-in-out" }}
      >
        <p className={styles.counterBoxTitle}>
          Žurka u <span>{label}</span> počinje za:
        </p>
        <div className={styles.counter}>
          <div className={styles.counterItem}>
            <div>{time.days >= 10 ? time.days : "0" + time.days}</div>
            <div className={styles.label}>{getLabel(time.days, "days")}</div>
          </div>
          <div className={styles.counterItem}>
            <div>{time.hours >= 10 ? time.hours : "0" + time.hours}</div>
            <div className={styles.label}>{getLabel(time.hours, "hours")}</div>
          </div>
          <div className={styles.counterItem}>
            <div>{time.minutes >= 10 ? time.minutes : "0" + time.minutes}</div>
            <div className={styles.label}>{getLabel(time.minutes, "minutes")}</div>
          </div>
          <div className={styles.counterItem}>
            <div>{time.seconds >= 10 ? time.seconds : "0" + time.seconds}</div>
            <div className={styles.label}>{getLabel(time.seconds, "seconds")}</div>
          </div>
        </div>
      </div>

      <div className={styles.btn} onClick={() => handleChange((prev) => (prev === 0 ? 1 : 0))}>
        {label === "Beogradu" ? icons.ns : icons.bg}
      </div>
    </>
  );
};

const icons = {
  bg: (
    <svg width="87" height="37" viewBox="0 0 87 37" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M3.18 2.13998C4 1.19998 4.88 0.72998 5.82 0.72998C6.76 0.72998 7.32 1.44998 7.5 2.88998V2.97998C7.5 3.69998 7.09 5.26998 6.27 7.68998L7.68 7.38998C9.4 7.38998 10.4 8.48998 10.68 10.69V11.14C10.68 13.78 9.02 16.19 5.7 18.37C4.62 18.79 3.84 19 3.36 19C1.74 19 0.62 18.06 0 16.18C0.04 15.96 0.29 15.65 0.75 15.25C0.97 6.20998 1.16 1.68998 1.32 1.68998C1.66 1.34998 1.97 1.17998 2.25 1.17998C2.79 1.37998 3.06 1.69998 3.06 2.13998H3.18ZM2.88 10.39H3C4.64 7.28998 5.51 4.88998 5.61 3.18998V2.49998H5.31C4.89 2.49998 4.33 3.62998 3.63 5.88998C3.13 8.02998 2.88 9.52998 2.88 10.39ZM4.02 12.25L3.57 12.43L2.82 12.37V12.43L2.7 12.82V15.94L2.61 17.05L3.27 17.23C4.97 17.23 6.65 15.95 8.31 13.39C8.77 12.25 9 11.31 9 10.57C9 9.64998 8.56 9.18998 7.68 9.18998H7.56C6.6 9.18998 5.42 10.21 4.02 12.25Z"
        fill="#C3FF0B"
      />
      <path
        d="M14.5786 8.22998C15.3786 8.24998 16.7286 9.64998 18.6286 12.43L18.6886 12.94C18.6886 13.5 17.3186 13.93 14.5786 14.23L14.4886 14.32V14.44C14.9086 16.24 15.3486 17.14 15.8086 17.14H16.1686C16.8086 17.14 17.7786 16.45 19.0786 15.07H19.2586C19.6586 15.07 19.9686 15.36 20.1886 15.94C20.1886 16.42 19.3486 17.25 17.6686 18.43C17.2286 18.69 16.6986 18.88 16.0786 19C14.4586 19 13.3286 17.48 12.6886 14.44C11.7686 14.3 11.3086 13.92 11.3086 13.3C11.3086 12.86 11.6486 12.57 12.3286 12.43V12.55L12.6286 12.43V11.68C12.6286 9.37998 13.2786 8.22998 14.5786 8.22998ZM14.7586 10.39H14.4886L14.3686 11.5V12.43H14.4886C15.6086 12.39 16.1686 12.27 16.1686 12.07C15.6486 11.29 15.1786 10.73 14.7586 10.39Z"
        fill="#C3FF0B"
      />
      <path
        d="M26.1415 7.68998C27.6215 7.68998 28.7415 8.78998 29.5015 10.99L29.6215 11.62C29.6215 13.76 28.6215 15.95 26.6215 18.19C25.8215 18.93 25.0115 19.3 24.1915 19.3C22.9915 19.3 22.1415 18.61 21.6415 17.23C21.4615 16.59 21.3715 16.03 21.3715 15.55V15.19C21.3715 12.03 22.5215 9.62998 24.8215 7.98998C25.2215 7.78998 25.6615 7.68998 26.1415 7.68998ZM23.1415 15.49C23.1415 16.85 23.4915 17.53 24.1915 17.53C25.6515 17.53 26.8615 15.66 27.8215 11.92V11.35C27.4815 10.11 26.8515 9.48998 25.9315 9.48998C25.5715 9.48998 25.3915 9.73998 25.3915 10.24C25.3915 10.58 24.9915 10.85 24.1915 11.05C23.4915 12.23 23.1415 13.71 23.1415 15.49Z"
        fill="#C3FF0B"
      />
      <path
        d="M35.7809 7.47998C36.7009 7.47998 37.1609 7.91998 37.1609 8.79998C37.2809 8.79998 37.3409 8.94998 37.3409 9.24998H37.4609L37.3409 10.12L37.4609 16.18L37.2809 20.98C39.0809 20.98 40.2909 22.3 40.9109 24.94C40.9109 25.48 40.5409 25.79 39.8009 25.87C39.4609 25.87 39.0809 25.12 38.6609 23.62C38.2609 23.04 37.8009 22.75 37.2809 22.75H37.1609C36.5209 27.01 35.9609 29.14 35.4809 29.14C34.9009 30.2 34.0609 30.73 32.9609 30.73C31.3409 30.35 30.5309 29.54 30.5309 28.3V28.12C30.5309 26.24 31.8709 24.2 34.5509 22L35.4809 21.43L35.6009 18.19V17.44H35.4809C34.8009 18.3 34.1509 18.73 33.5309 18.73H33.3509C31.9709 18.73 31.1809 17.67 30.9809 15.55V14.89C30.9809 12.33 31.9209 10.11 33.8009 8.22998C34.3809 7.72998 35.0409 7.47998 35.7809 7.47998ZM32.7809 14.5V15.94C32.8609 16.6 33.0109 16.93 33.2309 16.93H33.5309C34.0909 16.93 34.7809 14.87 35.6009 10.75V9.24998C34.4009 9.24998 33.4609 11 32.7809 14.5ZM32.3009 28.18C32.3809 28.68 32.6609 28.93 33.1409 28.93C34.1009 28.93 34.7909 27.22 35.2109 23.8H35.0309C33.2109 25.38 32.3009 26.84 32.3009 28.18Z"
        fill="#C3FF0B"
      />
      <path
        d="M42.9968 7.17998C44.2568 7.17998 45.0068 8.05998 45.2468 9.81998V10.09C45.2468 12.03 44.2468 13.81 42.2468 15.43C43.4068 16.57 45.4368 17.14 48.3368 17.14C48.7768 17.28 48.9968 17.59 48.9968 18.07C48.9968 18.61 48.6468 18.88 47.9468 18.88C45.9868 18.88 43.9268 18.38 41.7668 17.38V18.25C41.7668 20.31 41.3268 21.34 40.4468 21.34C39.8268 21.34 39.5168 20.15 39.5168 17.77V15.43L39.4268 14.59L39.6368 13.63L39.4268 10.75V10.63C39.4268 10.09 39.7068 9.71998 40.2668 9.51998C41.0468 7.95998 41.9568 7.17998 42.9968 7.17998ZM41.4968 13.75C42.0768 13.75 42.7268 12.71 43.4468 10.63V9.33998L43.0868 8.94998H42.8168C41.9368 9.54998 41.4968 11.15 41.4968 13.75Z"
        fill="#C3FF0B"
      />
      <path
        d="M55.6038 7.41998C56.4838 7.41998 56.9238 7.76998 56.9238 8.46998L56.6538 9.03998L56.4738 14.53C56.4738 17.01 56.9738 18.55 57.9738 19.15L58.0338 19.6C57.9738 20.18 57.7038 20.47 57.2238 20.47H57.0438C55.5438 19.45 54.7938 17.89 54.7938 15.79H54.5838C53.7838 18.03 52.8138 19.15 51.6738 19.15C50.6138 18.85 50.0838 18.06 50.0838 16.78C50.0838 13.96 51.2138 11.15 53.4738 8.34998C54.2338 7.72998 54.9438 7.41998 55.6038 7.41998ZM51.9738 15.58L51.8538 16.42V16.99H52.1538C53.6538 13.25 54.4038 10.97 54.4038 10.15H54.2838C53.1238 11.45 52.3538 13.26 51.9738 15.58Z"
        fill="#C3FF0B"
      />
      <path
        d="M65.8036 2.52998C66.1436 2.52998 66.4536 2.84998 66.7336 3.48998L65.4136 11.83V14.17C65.4136 16.61 65.7936 17.83 66.5536 17.83C67.0536 18.07 67.3036 18.39 67.3036 18.79C67.3036 19.25 66.9036 19.52 66.1036 19.6C65.2236 19.6 64.5336 18.79 64.0336 17.17H63.7336C62.9936 18.79 62.0936 19.6 61.0336 19.6C59.7936 19.6 59.0436 18.66 58.7836 16.78C58.7836 14.6 60.2436 12.29 63.1636 9.84998C63.7436 9.84998 64.0336 9.03998 64.0336 7.41998C64.4736 4.15998 65.0636 2.52998 65.8036 2.52998ZM60.5536 16.54V17.35L61.0336 17.83H61.2136C61.8536 17.83 62.6036 15.9 63.4636 12.04H63.2836C61.4636 13.86 60.5536 15.36 60.5536 16.54Z"
        fill="#C3FF0B"
      />
      <path
        d="M57.2588 26.9538C57.1901 26.6976 57.2261 26.4247 57.3587 26.195C57.4913 25.9653 57.7097 25.7977 57.9659 25.729C58.2221 25.6604 58.495 25.6963 58.7247 25.8289C58.9544 25.9616 59.122 26.18 59.1906 26.4362C59.7539 28.5374 60.9276 30.4244 62.5633 31.8586C64.1989 33.2928 66.2231 34.2099 68.3799 34.4938C70.5367 34.7777 72.7292 34.4157 74.6803 33.4536C76.6314 32.4915 78.2534 30.9725 79.3413 29.0887L81.3246 25.6818L75.9395 27.1247C75.6834 27.1933 75.4104 27.1574 75.1807 27.0248C74.951 26.8922 74.7834 26.6737 74.7148 26.4176C74.6462 26.1614 74.6821 25.8884 74.8147 25.6587C74.9473 25.4291 75.1657 25.2615 75.4219 25.1928L83.1493 23.1223C83.4055 23.0536 83.6785 23.0896 83.9081 23.2222C84.1378 23.3548 84.3054 23.5732 84.3741 23.8294L86.4446 31.5568C86.5133 31.813 86.4773 32.0859 86.3447 32.3156C86.2121 32.5453 85.9937 32.7129 85.7375 32.7815C85.4813 32.8502 85.2084 32.8142 84.9787 32.6816C84.749 32.549 84.5814 32.3306 84.5128 32.0744L83.0643 26.6689L81.0725 30.0923C79.7865 32.3184 77.8693 34.1132 75.5633 35.2498C73.2573 36.3865 70.6661 36.8138 68.1173 36.4779C65.5684 36.142 63.1764 35.0579 61.2436 33.3626C59.3109 31.6674 57.9241 29.4371 57.2588 26.9538Z"
        fill="#C3FF0B"
      />
    </svg>
  ),
  ns: (
    <svg width="92" height="39" viewBox="0 0 92 39" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M3.60586 1.44C4.54586 1.74 6.33586 5.39 8.97586 12.39L9.42586 12.93V11.25C9.42586 6.79 10.5259 3.64 12.7259 1.8C13.2259 1.8 13.5359 2.14 13.6559 2.82C12.1559 5.06 11.4059 6.87 11.4059 8.25C11.3059 8.25 11.2459 8.88 11.2259 10.14V11.73C11.2259 13.11 11.3759 15.08 11.6759 17.64C11.4959 18.14 11.1759 18.39 10.7159 18.39C10.2559 18.39 9.60586 17.45 8.76586 15.57C7.74586 13.95 6.62586 11.49 5.40586 8.19H5.28586V8.37L5.46586 12.18C5.46586 16.12 4.71586 18.66 3.21586 19.8L2.46586 19.89C1.84586 19.89 1.32586 19.32 0.905859 18.18C1.04586 17.56 1.35586 17.25 1.83586 17.25H2.01586L2.58586 17.73H2.67586C3.37586 16.79 3.72586 15.01 3.72586 12.39C3.72586 9.75 3.34586 6.41 2.58586 2.37C2.58586 1.83 2.92586 1.52 3.60586 1.44ZM19.0751 6.69C20.5551 6.69 21.6751 7.79 22.4351 9.99L22.5551 10.62C22.5551 12.76 21.5551 14.95 19.5551 17.19C18.7551 17.93 17.9451 18.3 17.1251 18.3C15.9251 18.3 15.0751 17.61 14.5751 16.23C14.3951 15.59 14.3051 15.03 14.3051 14.55V14.19C14.3051 11.03 15.4551 8.63 17.7551 6.99C18.1551 6.79 18.5951 6.69 19.0751 6.69ZM16.0751 14.49C16.0751 15.85 16.4251 16.53 17.1251 16.53C18.5851 16.53 19.7951 14.66 20.7551 10.92V10.35C20.4151 9.11 19.7851 8.49 18.8651 8.49C18.5051 8.49 18.3251 8.74 18.3251 9.24C18.3251 9.58 17.9251 9.85 17.1251 10.05C16.4251 11.23 16.0751 12.71 16.0751 14.49ZM24.3345 7.89C24.7945 7.89 25.2945 8.99 25.8345 11.19C26.5945 12.95 27.0245 13.88 27.1245 13.98C27.2245 13.98 27.5945 12.98 28.2345 10.98C28.8745 8.98 29.4845 7.98 30.0645 7.98C30.6045 8.18 30.8745 8.5 30.8745 8.94C29.2145 13.22 28.3845 16.05 28.3845 17.43L27.8145 18H27.2445C26.5245 17.48 25.3045 14.73 23.5845 9.75L23.3145 8.64C23.4545 8.14 23.7945 7.89 24.3345 7.89ZM32.5062 2.37C33.2662 2.53 33.6462 2.87 33.6462 3.39C33.4462 3.95 33.1262 4.23 32.6862 4.23C31.9462 4.09 31.5762 3.72 31.5762 3.12C31.7762 2.62 32.0862 2.37 32.5062 2.37ZM33.6462 6.57C33.9662 6.57 34.2362 6.86 34.4562 7.44L34.1862 9.57V10.98C34.1862 12.62 34.4662 14.77 35.0262 17.43C34.8262 17.81 34.4862 18 34.0062 18C33.1862 18 32.6462 15.6 32.3862 10.8V9.75C32.3862 7.63 32.8062 6.57 33.6462 6.57Z"
        fill="#C3FF0B"
      />
      <path
        d="M50.6385 0.24H50.9385C51.4985 0.24 51.8185 0.57 51.8985 1.23C51.8985 1.81 51.1085 2.1 49.5285 2.1C46.9885 3.06 45.2785 4.46 44.3985 6.3L44.1885 7.17V7.35C44.1885 8.23 44.7785 8.67 45.9585 8.67L49.2585 8.49C51.4785 8.49 52.9785 9.57 53.7585 11.73L53.9385 12.78C53.9385 14.86 52.2585 16.76 48.8985 18.48C47.8985 18.76 47.0185 18.95 46.2585 19.05C44.2185 19.05 42.7785 17.9 41.9385 15.6C41.6985 14.82 41.5785 14.03 41.5785 13.23C41.5785 12.99 41.7685 12.74 42.1485 12.48H42.5085C43.1285 12.48 43.4385 13.27 43.4385 14.85C43.9585 16.41 44.7785 17.19 45.8985 17.19H46.7085C48.3285 17.19 49.9285 16.25 51.5085 14.37C51.9285 13.77 52.1385 13.12 52.1385 12.42C52.1385 11.44 51.3685 10.75 49.8285 10.35H49.7085L45.7785 10.44C43.5985 10.18 42.5085 9.28 42.5085 7.74L42.3885 7.35C42.3885 5.29 43.9285 3.29 47.0085 1.35C48.3485 0.61 49.5585 0.24 50.6385 0.24ZM60.8109 6.42C61.6909 6.42 62.1309 6.77 62.1309 7.47L61.8609 8.04L61.6809 13.53C61.6809 16.01 62.1809 17.55 63.1809 18.15L63.2409 18.6C63.1809 19.18 62.9109 19.47 62.4309 19.47H62.2509C60.7509 18.45 60.0009 16.89 60.0009 14.79H59.7909C58.9909 17.03 58.0209 18.15 56.8809 18.15C55.8209 17.85 55.2909 17.06 55.2909 15.78C55.2909 12.96 56.4209 10.15 58.6809 7.35C59.4409 6.73 60.1509 6.42 60.8109 6.42ZM57.1809 14.58L57.0609 15.42V15.99H57.3609C58.8609 12.25 59.6109 9.97 59.6109 9.15H59.4909C58.3309 10.45 57.5609 12.26 57.1809 14.58ZM71.0106 1.53C71.3506 1.53 71.6606 1.85 71.9406 2.49L70.6206 10.83V13.17C70.6206 15.61 71.0006 16.83 71.7606 16.83C72.2606 17.07 72.5106 17.39 72.5106 17.79C72.5106 18.25 72.1106 18.52 71.3106 18.6C70.4306 18.6 69.7406 17.79 69.2406 16.17H68.9406C68.2006 17.79 67.3006 18.6 66.2406 18.6C65.0006 18.6 64.2506 17.66 63.9906 15.78C63.9906 13.6 65.4506 11.29 68.3706 8.85C68.9506 8.85 69.2406 8.04 69.2406 6.42C69.6806 3.16 70.2706 1.53 71.0106 1.53ZM65.7606 15.54V16.35L66.2406 16.83H66.4206C67.0606 16.83 67.8106 14.9 68.6706 11.04H68.4906C66.6706 12.86 65.7606 14.36 65.7606 15.54Z"
        fill="#C3FF0B"
      />
      <path
        d="M62.2588 25.9538C62.1901 25.6976 62.2261 25.4247 62.3587 25.195C62.4913 24.9653 62.7097 24.7977 62.9659 24.7291C63.2221 24.6604 63.495 24.6964 63.7247 24.829C63.9544 24.9616 64.122 25.18 64.1906 25.4362C64.7539 27.5374 65.9276 29.4244 67.5633 30.8586C69.1989 32.2928 71.2231 33.2099 73.3799 33.4938C75.5367 33.7777 77.7292 33.4157 79.6803 32.4536C81.6314 31.4915 83.2534 29.9725 84.3413 28.0887L86.3246 24.6818L80.9395 26.1247C80.6834 26.1933 80.4104 26.1574 80.1807 26.0248C79.951 25.8922 79.7834 25.6738 79.7148 25.4176C79.6462 25.1614 79.6821 24.8885 79.8147 24.6588C79.9473 24.4291 80.1657 24.2615 80.4219 24.1928L88.1493 22.1223C88.4055 22.0536 88.6784 22.0896 88.9081 22.2222C89.1378 22.3548 89.3054 22.5732 89.3741 22.8294L91.4446 30.5568C91.5133 30.813 91.4773 31.0859 91.3447 31.3156C91.2121 31.5453 90.9937 31.7129 90.7375 31.7815C90.4813 31.8502 90.2084 31.8143 89.9787 31.6816C89.749 31.549 89.5814 31.3306 89.5128 31.0744L88.0643 25.6689L86.0725 29.0923C84.7865 31.3184 82.8693 33.1132 80.5633 34.2499C78.2573 35.3865 75.6661 35.8138 73.1173 35.4779C70.5684 35.142 68.1764 34.0579 66.2436 32.3626C64.3109 30.6674 62.9241 28.4371 62.2588 25.9538Z"
        fill="#C3FF0B"
      />
    </svg>
  ),
};
